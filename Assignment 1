Andres Arevlo
CIS-11

 [ ] 1.1.3 Section Review, Questions 1,3, 8, 12

1) Assemblers convert source code into machine language.
   Linkers combine the files produced by the assemmblers to create an executable program.

3) A single statement in high level languages results in multiple machine instructions where in 
   assembly programming its a one-to-one relationship with machine laguage instructions.

8) I think type checking in c or c++ might be stricter because higher level
   languages don't have direct access to memory address.

12) X = (Y*4)+3
    
    mov	eax,Y
    mov ebx,4
    imul ebx
    add eax,3
    mov X,eax

- [ ] 1.2.1 Section Review, Questions 2, 3, 10

2) There is no need to decode during runtime for translated programs as a result they run faster 
   than interpreted ones because the processor is seeking to decode every individual instructions before execution.

3) True

10) They are translated in the instruction set architechture(ISA).

- [ ] 1.3.9 Section Review, Questions 2, 3, 5, 6, 7

2) a. 11111000 = 248
   b. 11001010 = 202   
   c. 11110000 = 240

3) a. 00010001
   b. 10000000
   c. 00011110

5) a. 7 bits
   b. 9 bits
   c. 15 bits

6) a. 35DA
   b. CEA3
   c. FEDB

7) a. 1010 0100 0110 1001 0011 1111 1011 1100
   b. 1011 0110 1001 0111 1100 0111 1010 0001
   c. 0010 1011 0011 1101 1001 0100 0110 0001
 
- [ ] 1.7.1 Short Answer, Questions 1-22 and 25

1)  The decimal in the leftmost side with higest 2 base degree

2) a. 00110101 = 53
   b. 10010110 = 150
   c. 11001100 = 204

3) a. 10101111 + 11011011
   = 10001010

   b. 10010111 + 11111111
   = 10010110

   c. 01110101 + 10101100
   = 00100001

4) 00000110

5) a.16
   b.32
   c.64
   d.128

6) a. 4095 = 12 bits
   b. 65534 = 16 bits
   c. 42319 = 16 bits

7) a. 0011 0101 1101 1010 = 35DA 
   b. 1100 1110 1010 0011 = CEA3
   c. 1111 1110 1101 1011 = FEDB

8) a. 0000 0001 0010 0110 1111 1001 1101 0100
   b. 0110 1010 1100 1101 1111 1010 1001 0101
   c. 1111 0110 1001 1011 1101 1100 0010 1010

9) a. 58
   b. 511
   c. 4097

10) a. 98
    b. 1203
    c. 671

11) a. -24 = FFE8 
    b. -331 = FEB5

12) a. -21 = FFEB
    b. -45 = FFD3

13) a. 6BF9 = 27641
    b. C123 = -16093

14) a. 4CD2 = -13102
    b. 8230 = -32208

15) a. 10110101 = -75
    b. 00101010 = 42
    c. 11110000 = 240

16) a. 10000000 = -128
    b. 11001100 = -52
    c. 10110111 = -73

17) a. -5 = 00000101
    b. -42 = 00101010
    c. -16 = 00010000

18) a. -72 = 01001000
    b. -98 = 01100010
    c. -26 = 00011010

19) a. 6B4 + 3FE = AB2
    b. A49 + 6BD = 106

20) a. 7C4 + 3BE = B62
    b. B69 + 7AD = 316

21) What are the hexadecimal and decimal representations of the 
ASCII character capital B?
= 42

22) What are the hexadecimal and decimal representations of the
 ASCII character capital G?
= 47

25) A B (AvB) ~(AvB)
    F F	F       T
    F T T       F
    T F T       F
    T T T       F

- [ ] 1.7.2 Algorithm Workbench, Choose any 1 question 


#include <iostream>
#include <string>
#include <cmath>

bool validation();

int main()
{
	int total = 0;
	bool valid = false;
	std::string userBinary;
	std::string::iterator binaryIterator;

	do
	{
		std::cout << "Enter a 16bit binary integer.\n";
		getline(std::cin, userBinary);

		valid = validation();
		if (userBinary.size() == 16)
		{
			valid == true;
		}
		else
		{
			std::cout << "Invalid binary size.\n";
			valid = false;
		}

		for (binaryIterator = userBinary.begin(); binaryIterator < userBinary.end(); binaryIterator++)
		{
			if (*binaryIterator == '0'||*binaryIterator == '1' && valid)
			{
				valid = true;
			}
			else 
			{
				valid = false;
				break;
			}
		}
		if ( !valid )
		{
			std::cout << "Invalid input.\n";
		}

	} while (!valid);
	
	int i = 0;
	for (std::string::reverse_iterator bit = userBinary.rbegin(); bit != userBinary.rend(); ++bit)
	{

		if (*bit == '1')
		{
			total += pow(2, i);
		}
		i += 1;
	
	}
	system("cls");

	std::cout << total << std::endl;
	system("pause");
	return 0;
}


bool validation()
{

	if (std::cin.fail())
	{

		std::cin.clear();
		std::cin.ignore(256, '\n');
		std::cout << "Data type mismatch occured. \n\n";
		return false;
	}
	

	else
		return true;;
}
